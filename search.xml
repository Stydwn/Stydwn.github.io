<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>KMP&amp;Trie习题解答</title>
    <url>/2020/07/20/KMP&amp;&amp;TRIE%E8%A7%A3%E7%AD%94/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=1961" target="_blank" rel="noopener">POJ 1961</a></p>
<blockquote>
<p>求最下循环节问题，上节课讲过了，没有理解的话，记住公式.</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">1000006</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">int</span> sim=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	nxt[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,k=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;s.size())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">-1</span>||s[i]==s[k])</span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">			k++;</span><br><span class="line">			nxt[i]=k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> k=nxt[k];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;len)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(len==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		get_next();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Test case #"</span>&lt;&lt;sim++&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=len;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> lens=i;</span><br><span class="line">			<span class="keyword">if</span>(lens%(lens-nxt[i])==<span class="number">0</span>&amp;&amp;nxt[i]!=<span class="number">0</span>)<span class="comment">//这里就是公式 当可以整除表明存在最小循环节</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;lens&lt;&lt;<span class="string">" "</span>&lt;&lt;lens/(lens-nxt[i])&lt;&lt;<span class="built_in">endl</span>;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://poj.org/problem?id=1056" target="_blank" rel="noopener">POJ1056</a></p>
<blockquote>
<p>题目大意：就是输多组0 1数据，任意一组数据不能成为另一种的前缀<br>思路：建立trie树，每次插入的时候查询一下是否会有新字符要插入，如果有就符合，没有的话当前要插入的字符串就是其他字符串的前缀。<br>注意这道题数据很小:<br>0000<br>010<br>10<br>01<br>应该输出——not———  </p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100006</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="keyword">int</span> trie[N][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f=<span class="number">1</span>;</span><br><span class="line">	index=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cnt[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">		trie[i][j]=<span class="number">0</span>;	</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> c=t[i]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">if</span>(!trie[p][c])trie[p][c]=++index;</span><br><span class="line">		p=trie[p][c];</span><br><span class="line">		<span class="keyword">if</span>(cnt[p])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cnt[p]++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t.size();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> c=t[i]-<span class="string">'0'</span>;</span><br><span class="line">		<span class="keyword">if</span>(!trie[p][c])<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//有新单词要插入 返回1</span></span><br><span class="line">		p=trie[p][c];</span><br><span class="line">		<span class="keyword">if</span>(cnt[p])<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//当前字符串在之前已经有了返回0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果这个字符串是之前的前缀 返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(s==<span class="string">"9"</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(f)<span class="built_in">cout</span>&lt;&lt;<span class="string">"Set "</span>&lt;&lt;k++&lt;&lt;<span class="string">" is immediately decodable"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Set "</span>&lt;&lt;k++&lt;&lt;<span class="string">" is not immediately decodable"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			init();	</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(f)</span><br><span class="line">		&#123;   </span><br><span class="line">			f=query(s);</span><br><span class="line">			insert(s);		</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://poj.org/problem?id=2001" target="_blank" rel="noopener">POJ2001</a></p>
<blockquote>
<p>题目大意：找字符串的最独一无二的前缀<br>思路：trie树，建立的时候每个节点都打上标记，查询的时候碰到标记值为1的时候就是独一无二的前缀。碰到标记值大于1的进行下一次循环。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> trie[N][<span class="number">27</span>];</span><br><span class="line"><span class="keyword">int</span> cnt[N];</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="keyword">char</span> p[N][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> c=s[i]-<span class="string">'a'</span>;</span><br><span class="line">			<span class="keyword">if</span>(!trie[p][c])trie[p][c]=++index;</span><br><span class="line">			p=trie[p][c];</span><br><span class="line">			cnt[p]++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> c=s[i]-<span class="string">'a'</span>;</span><br><span class="line">			p=trie[p][c];</span><br><span class="line">			<span class="keyword">if</span>(cnt[p]&gt;<span class="number">1</span>)<span class="built_in">cout</span>&lt;&lt;s[i];</span><br><span class="line">			<span class="keyword">if</span>(cnt[p]==<span class="number">1</span>)&#123;<span class="built_in">cout</span>&lt;&lt;s[i];<span class="keyword">return</span>;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> line=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,p[line])!=EOF)/用C的语法写，不然会tle 血的教训</span><br><span class="line">	&#123;</span><br><span class="line">		line++;</span><br><span class="line">		insert(p[line<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;line;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;p[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		query(p[i]);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="http://poj.org/problem?id=2503" target="_blank" rel="noopener">POJ2503</a></p>
<blockquote>
<p>题目大意：给你一个翻译后的字符串和翻译前的字符串形成字典，输入翻译前的字符串将它进行翻译。<br>思路:建立trie树，节点值不仅要存标记值，而且还要存进去翻译后的字符串。（注意要用空间建立，第一次写没看见题目给定的范围用数组模拟空间会爆内存）</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">46</span>;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">1000000</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">trieNode</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">	trieNode** son;</span><br><span class="line">	<span class="keyword">int</span> cnt;</span><br><span class="line">	<span class="built_in">string</span> ans;</span><br><span class="line">	trieNode(<span class="keyword">int</span> num)</span><br><span class="line">	&#123;</span><br><span class="line">		ans=<span class="string">""</span>;</span><br><span class="line">		c=num;</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		son=<span class="keyword">new</span> trieNode*[N];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)son[i]=<span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">trieNode* root;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">string</span> s,<span class="built_in">string</span> s1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	trieNode* p=root;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> c=s[i]-<span class="string">'a'</span>;</span><br><span class="line">		<span class="keyword">if</span>(!p-&gt;son[c])p-&gt;son[c]=<span class="keyword">new</span> trieNode(<span class="string">'c'</span>);</span><br><span class="line">		p=p-&gt;son[c];</span><br><span class="line">	&#125;	</span><br><span class="line">	p-&gt;cnt++;</span><br><span class="line">	p-&gt;ans=s1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	trieNode* p=root;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.size();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> c=s[i]-<span class="string">'a'</span>;</span><br><span class="line">		<span class="keyword">if</span>(!p-&gt;son[c])<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">		p=p-&gt;son[c];		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p-&gt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	root=<span class="keyword">new</span> trieNode(<span class="number">0</span>);	</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="built_in">string</span> s1,s2;</span><br><span class="line">	<span class="keyword">char</span> t;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		t=getchar();</span><br><span class="line">		s1=<span class="string">""</span>;s2=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(t==<span class="string">'\n'</span>)<span class="keyword">break</span>;</span><br><span class="line">		s1+=t;</span><br><span class="line">		<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			t=getchar();</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="string">' '</span>)&#123;flag=<span class="number">0</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line">			<span class="keyword">if</span>(t==<span class="string">'\n'</span>)<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">if</span>(flag)s1+=t;</span><br><span class="line">			<span class="keyword">else</span> s2+=t;			</span><br><span class="line">		&#125;</span><br><span class="line">		insert(s2,s1);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,op)!=EOF)<span class="comment">//用C写法，不然TLE wa哭了qvq</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> pri=query(op);</span><br><span class="line">		<span class="keyword">if</span>(pri!=<span class="string">""</span>)</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;pri&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"eh"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>KMP&amp;Trie</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路习题集</title>
    <url>/2020/07/16/%E4%B8%93%E9%A2%98%E5%9B%9B%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p><a href="http://poj.org/problem?id=2387" target="_blank" rel="noopener">A - Til the Cows Come Home </a></p>
<blockquote>
<p>一个简单的迪杰斯特拉问题，求出1-n的最短路输出即可。注意可能有多条重复的路</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 2000 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXV 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> t,n;</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"><span class="keyword">int</span> k,minn;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijsktra</span><span class="params">(<span class="keyword">int</span> beg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	dis[beg]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		minn=MAXV;k=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[i]&amp;&amp;minn&gt;dis[i])</span><br><span class="line">			&#123;</span><br><span class="line">				k=i;</span><br><span class="line">				minn=dis[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">-1</span>)<span class="keyword">return</span>;</span><br><span class="line">		vis[k]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[i]&amp;&amp;dis[k]+G[k][i]&lt;dis[i])</span><br><span class="line">			&#123;</span><br><span class="line">				dis[i]=dis[k]+G[k][i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dis[i]=MAXV;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			G[i][j]=MAXV;</span><br><span class="line">			G[i][i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> num1,num2,len;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;num1&gt;&gt;num2&gt;&gt;len;</span><br><span class="line">		<span class="keyword">if</span>(G[num1][num2]&gt;len)&#123;</span><br><span class="line">		G[num1][num2]=len;</span><br><span class="line">		G[num2][num1]=len;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Dijsktra(<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;dis[n];    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/07/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>aaaa</tag>
      </tags>
  </entry>
</search>
